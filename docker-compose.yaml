version: "3"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    restart: always
    networks:
      - docker_network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: rag
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "rag"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - docker_network

  ingest_data:
    build:
      context: .
      dockerfile: ingestion/Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      hosts: '["http://elasticsearch:9200"]'
    networks:
      - docker_network

  start_sql_db:
    build:
      context: .
      dockerfile: database/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      hosts: '["http://elasticsearch:9200"]'
      pg_conn_string: "postgresql://username:password@postgres:5432/rag"
    networks:
      - docker_network

  api:
    build: .
    depends_on:
      ingest_data:
        condition: service_completed_successfully
      start_sql_db:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      google_api_key: ${google_api_key}
      hosts: '["http://elasticsearch:9200"]'
      pg_conn_string: "postgresql://username:password@postgres:5432/rag"
    networks:
      - docker_network

volumes:
  postgres_data:

networks:
  docker_network:
    driver: bridge
